using MicroServiceClientProduit.Models.Repositories;
using MicroServiceClientProduit.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using AutoMapper;
using MicroServiceClientProduit.Models.Dto;

namespace MicroServiceClientProduit.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProduitsController : ControllerBase
    {
        private readonly IMapper mapper;
        private readonly IProduitRepository produitRepository;

        private new List<string> allowExtentions = new List<string> { ".jpg", ".png" };
        private long maxAllowImageSize = 1048576;

        public ProduitsController(IProduitRepository produitRepository, IMapper mapper)
        {
            this.produitRepository = produitRepository;
            this.mapper = mapper;
        }

        //Renvoie tous les produits
        [HttpGet]
        public async Task<IActionResult> GetProduits()
        {
            try
            {
                var produits = await produitRepository.GetProduits();
                //Mapper la liste de pproduit en ProduitDetailsDto
                var data = mapper.Map<IEnumerable<ProduitDetailsDto>>(produits);
                return Ok(data);
            }
            catch (Exception e)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, $"Erreur lors de la recupération des produits! Cause : {e.Message}");
            }
        }

        //Renvoie un produit dont l'Id correspond à celui passé en paramètre
        [HttpGet("{id:int}")]
        public async Task<ActionResult> GetProduit(int id)
        {
            try
            {
                var result = await produitRepository.GetProduit(id);
                if (result == null) return NotFound();

                var dto = mapper.Map<ProduitDetailsDto>(result);
                return Ok(dto);
            }
            catch (Exception e)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, $"Erreur lors de la recupération du produit! Cause : {e.Message}");
            }
        }

        //Ajout d'un produit
        [HttpPost]
        public async Task<ActionResult<Produit>> CreateProduit(Produit produit)
        {
            try
            {
                if (produit == null) return BadRequest();
                else
                {
                    //Verifie si le produit existe dejà en Base de données
                    var p = await produitRepository.GetProduitByName(produit.Name);
                    if (p != null && p.Description == produit.Description)
                    {
                        ModelState.AddModelError("Produit", "Ce produit dejà existant");
                        return BadRequest(ModelState);
                    }
                    else
                    {
                        var createdProduit = await produitRepository.AddProduit(produit);
                        return CreatedAtAction(nameof(GetProduit), new { id = createdProduit.ProduitId }, createdProduit);
                    }
                }
            }
            catch (Exception e)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, $"Erreur lors de la creation du produit! Cause : {e.Message}");
            }
        }

        [HttpGet("categorie/{CategorieId:int}")]
        public async Task<ActionResult<IEnumerable<Produit>>> FilterByCategorie(int CategorieId)
        {
            try
            {
                var result = await produitRepository.GetProduitsByCategorieId(CategorieId);
                if (result.Any())
                    return Ok(result);

                return NotFound();
            }
            catch (Exception e)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, $"Erreur de recupération des données de la BD!! Cause : {e.Message}");
            }
        }

        //Mise à jour des informations d'un produit à partir de son Id
        [HttpPut("{id:int}")]
        public async Task<ActionResult<Produit>> UpdateProduit(int id, Produit produit)
        {
            try
            {
                if (id != produit.ProduitId)
                    return BadRequest("L'Id du produit ne correspond pas!!");

                var produitToUpdate = await produitRepository.GetProduit(id);

                if (produitToUpdate != null)
                    return NotFound($"Le produit avec l'Id = {id} est introuvable");

                return await produitRepository.UpdateProduit(produit);
            }
            catch (Exception e)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, $"Erreur lors de la mise à jour de la donnée!! Cause : {e.Message}");
            }
        }

        //Supression d'un produit à partir de son Id
        [HttpDelete("{id:int}")]
        public async Task<ActionResult<Produit>> DeleteProduit(int id)
        {
            try
            {
                var produitToDelete = await produitRepository.GetProduit(id);
                if (produitToDelete == null)
                    return NotFound($"Le produit avec l'Id = {id} est introuvable");

                return await produitRepository.DeleteProduit(id);
            }
            catch (Exception e)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, $"Erreur lors de la supression de la donnée!! Cause : {e.Message}");
            }
        }

        // Recherche sur les produits à partir d'un mot clé
        [HttpGet("{search}")]
        public async Task<ActionResult<IEnumerable<Produit>>> Search(string name)
        {
            try
            {
                var result = await produitRepository.Search(name);
                if (result.Any())
                    return Ok(result);

                return NotFound();
            }
            catch (Exception e)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, $"Erreur de recupération des données de la BD!! Cause : {e.Message}");
            }
        }
    }
}
